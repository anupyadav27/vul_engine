-- =============================================================================
-- VULNERABILITY DATABASE SCHEMA DEFINITION
-- =============================================================================
-- Pure schema definition without any data initialization
-- This file defines the complete database structure for vulnerability management
-- 
-- Usage: Execute this file to create the complete database schema
-- Dependencies: PostgreSQL 12+
-- =============================================================================

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- =============================================================================
-- CORE TABLES
-- =============================================================================

-- Master registry of all vulnerability data sources
CREATE TABLE IF NOT EXISTS vulnerability_sources (
    id SERIAL PRIMARY KEY,
    source_name VARCHAR(100) UNIQUE NOT NULL,           -- e.g., 'nvd', 'debian_security_tracker'
    category VARCHAR(50) NOT NULL,                      -- From interest_datasource_final.json categories
    display_name VARCHAR(200) NOT NULL,                 -- Human-readable name
    url TEXT,                                           -- Source URL
    status VARCHAR(20) DEFAULT 'active',                -- 'active', 'inactive', 'deprecated'
    priority INTEGER DEFAULT 5,                         -- 1-10, higher = more priority
    enhancement_needed BOOLEAN DEFAULT FALSE,           -- Needs improvement
    engine_type VARCHAR(20) DEFAULT 'existing',         -- 'existing', 'new'
    vulnerability_engine_priority VARCHAR(10),          -- 'high', 'medium', 'low'
    fetch_frequency_hours INTEGER DEFAULT 24,           -- How often to fetch
    timeout_seconds INTEGER DEFAULT 30,                 -- Request timeout
    retry_attempts INTEGER DEFAULT 3,                   -- Max retry attempts
    rate_limit_per_hour INTEGER DEFAULT 100,           -- API rate limit
    enable_incremental BOOLEAN DEFAULT TRUE,            -- Support incremental updates
    notes TEXT,                                         -- Additional information
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_fetch_at TIMESTAMP,                           -- Last successful fetch
    last_fetch_status VARCHAR(20)                      -- 'success', 'failed', 'partial'
);

-- Enhanced CVE table with source tracking
CREATE TABLE IF NOT EXISTS cves (
    cve_id VARCHAR(20) PRIMARY KEY,                     -- CVE-2023-12345
    source_id INTEGER REFERENCES vulnerability_sources(id), -- Original source
    description TEXT,
    severity VARCHAR(10),                               -- 'low', 'medium', 'high', 'critical'
    cvss_v2_score DECIMAL(3,1),
    cvss_v3_score DECIMAL(3,1),
    cvss_v2_vector VARCHAR(100),
    cvss_v3_vector VARCHAR(100),
    published_date TIMESTAMP,
    modified_date TIMESTAMP,
    
    -- Source Attribution
    discovered_by_source VARCHAR(100),                  -- Which source first discovered this
    source_priority INTEGER DEFAULT 5,                 -- Priority of the source that provided this
    cross_source_verified BOOLEAN DEFAULT FALSE,       -- Verified by multiple sources
    
    -- Data Quality and Validation
    data_quality_score DECIMAL(5,4) DEFAULT 1.0000,   -- 0.0000 to 1.0000
    validation_status VARCHAR(20) DEFAULT 'pending',   -- 'pending', 'validated', 'flagged'
    has_validation_errors BOOLEAN DEFAULT FALSE,
    validation_error_details JSONB,
    
    -- Relationships and Dependencies
    duplicate_of VARCHAR(20) REFERENCES cves(cve_id),  -- If this is a duplicate
    superseded_by VARCHAR(20) REFERENCES cves(cve_id), -- If this CVE is superseded
    related_cves TEXT[],                               -- Array of related CVE IDs
    
    -- Enhanced Metadata
    cwe_ids TEXT[],                                    -- Common Weakness Enumeration IDs
    reference_urls JSONB,                              -- Structured reference URLs and descriptions
    vendor_advisory_urls TEXT[],                       -- Vendor-specific advisory URLs
    exploit_availability VARCHAR(20) DEFAULT 'unknown', -- 'unknown', 'none', 'poc', 'functional', 'weaponized'
    patch_availability VARCHAR(20) DEFAULT 'unknown',  -- 'unknown', 'none', 'partial', 'complete'
    
    -- Business Impact Assessment
    business_criticality VARCHAR(10) DEFAULT 'medium', -- 'low', 'medium', 'high', 'critical'
    affected_systems_count INTEGER DEFAULT 0,          -- Number of affected systems (if known)
    remediation_complexity VARCHAR(10) DEFAULT 'medium', -- 'low', 'medium', 'high'
    remediation_time_estimate INTEGER,                 -- Estimated hours to remediate
    
    -- Compliance and Regulatory
    compliance_frameworks TEXT[],                      -- Array of applicable frameworks
    regulatory_requirements TEXT[],                    -- Specific regulatory requirements
    requires_immediate_attention BOOLEAN DEFAULT FALSE, -- Critical business flag
    
    -- Audit Trail
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(100) DEFAULT 'system',          -- User or system that created
    last_modified_by VARCHAR(100) DEFAULT 'system',    -- User or system that last modified
    
    -- Search and Performance
    search_vector tsvector,                            -- Full-text search support
    
    -- Additional source-specific data
    source_specific_data JSONB,                        -- Store source-specific fields
    
    -- Package and Software Information
    affected_packages JSONB                             -- Array of affected packages for this CVE
);

-- CPE (Common Platform Enumeration) table
CREATE TABLE IF NOT EXISTS cpes (
    id SERIAL PRIMARY KEY,
    cve_id VARCHAR(20) REFERENCES cves(cve_id) ON DELETE CASCADE,
    source_id INTEGER REFERENCES vulnerability_sources(id),  -- Track CPE source
    cpe_uri VARCHAR(500),
    part VARCHAR(10),
    vendor VARCHAR(100),
    product VARCHAR(100),
    version VARCHAR(50),
    version_start_including VARCHAR(50),
    version_start_excluding VARCHAR(50),
    version_end_including VARCHAR(50),
    version_end_excluding VARCHAR(50),
    vulnerable BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(cve_id, cpe_uri, source_id)  -- Allow same CPE from different sources
);

-- =============================================================================
-- MITRE ATT&CK INTEGRATION
-- =============================================================================

-- MITRE ATT&CK techniques
CREATE TABLE IF NOT EXISTS mitre_techniques (
    technique_id VARCHAR(10) PRIMARY KEY,              -- T1234
    name VARCHAR(200) NOT NULL,
    description TEXT,
    tactic VARCHAR(100),
    platform TEXT[],                                   -- Array of platforms
    data_sources TEXT[],                               -- Array of data sources
    detection TEXT,
    mitigation TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- CVE to MITRE ATT&CK technique mappings
CREATE TABLE IF NOT EXISTS cve_attack_mappings (
    id SERIAL PRIMARY KEY,
    cve_id VARCHAR(20) REFERENCES cves(cve_id) ON DELETE CASCADE,
    technique_id VARCHAR(10) REFERENCES mitre_techniques(technique_id),
    confidence_level VARCHAR(10) DEFAULT 'medium',     -- 'low', 'medium', 'high'
    mapping_source VARCHAR(100),                       -- Source of the mapping
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(cve_id, technique_id)
);

-- =============================================================================
-- PIPELINE AND QUALITY MANAGEMENT
-- =============================================================================

-- Pipeline execution tracking
CREATE TABLE IF NOT EXISTS pipeline_executions (
    run_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    pipeline_type VARCHAR(50) NOT NULL,                -- 'full_sync', 'incremental', 'source_specific'
    execution_status VARCHAR(20) DEFAULT 'running',    -- 'running', 'completed', 'failed', 'cancelled'
    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP,
    
    -- Execution Context
    triggered_by VARCHAR(100),                         -- 'scheduler', 'manual', 'api'
    environment VARCHAR(20),                           -- 'development', 'testing', 'production'
    source_filters TEXT[],                             -- Which sources were included
    
    -- Progress Tracking
    total_sources INTEGER DEFAULT 0,
    completed_sources INTEGER DEFAULT 0,
    failed_sources INTEGER DEFAULT 0,
    total_vulnerabilities_processed INTEGER DEFAULT 0,
    
    -- Quality Metrics
    data_quality_score DECIMAL(5,4),                  -- Overall quality of this run
    validation_errors INTEGER DEFAULT 0,
    duplicate_count INTEGER DEFAULT 0,
    
    -- Performance Metrics
    execution_time_seconds DECIMAL(10,3),
    memory_usage_mb DECIMAL(10,2),
    cpu_usage_percent DECIMAL(5,2),
    
    -- Error Handling
    error_message TEXT,
    error_details JSONB,
    retry_count INTEGER DEFAULT 0,
    
    -- Audit
    created_by VARCHAR(100) DEFAULT 'system',
    configuration_snapshot JSONB                       -- Copy of configuration used
);

-- Quality metrics tracking per source and batch
CREATE TABLE IF NOT EXISTS quality_metrics (
    id SERIAL PRIMARY KEY,
    pipeline_run_id UUID REFERENCES pipeline_executions(run_id),
    source_id INTEGER REFERENCES vulnerability_sources(id),
    
    -- Quality Dimensions
    completeness_score DECIMAL(5,4),                  -- Data completeness (0.0-1.0)
    accuracy_score DECIMAL(5,4),                      -- Data accuracy (0.0-1.0)
    consistency_score DECIMAL(5,4),                   -- Cross-source consistency (0.0-1.0)
    timeliness_score DECIMAL(5,4),                    -- Data freshness (0.0-1.0)
    validity_score DECIMAL(5,4),                      -- Schema compliance (0.0-1.0)
    
    -- Specific Metrics
    total_records INTEGER DEFAULT 0,
    valid_records INTEGER DEFAULT 0,
    duplicate_records INTEGER DEFAULT 0,
    invalid_records INTEGER DEFAULT 0,
    missing_critical_fields INTEGER DEFAULT 0,
    
    -- Validation Details
    schema_violations JSONB,                           -- Specific schema violations
    business_rule_violations JSONB,                    -- Business rule violations
    data_anomalies JSONB,                             -- Detected anomalies
    
    -- Comparative Analysis
    compared_with_sources INTEGER[],                   -- Sources compared against
    consistency_conflicts INTEGER DEFAULT 0,           -- Number of conflicts found
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =============================================================================
-- AUDIT AND MONITORING TABLES
-- =============================================================================

-- Source fetch audit table with quality integration
CREATE TABLE IF NOT EXISTS source_fetch_audit (
    id SERIAL PRIMARY KEY,
    source_id INTEGER REFERENCES vulnerability_sources(id),
    pipeline_run_id UUID REFERENCES pipeline_executions(run_id),
    fetch_started TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fetch_completed TIMESTAMP,
    status VARCHAR(20),                                     -- 'success', 'failed', 'partial'
    
    -- Fetch Statistics
    records_available INTEGER DEFAULT 0,                   -- Records available at source
    records_fetched INTEGER DEFAULT 0,                     -- Records actually fetched
    records_new INTEGER DEFAULT 0,                         -- New records
    records_updated INTEGER DEFAULT 0,                     -- Updated records
    records_duplicated INTEGER DEFAULT 0,                  -- Duplicate records
    records_skipped INTEGER DEFAULT 0,                     -- Skipped records
    
    -- Data Quality During Fetch
    fetch_quality_score DECIMAL(5,4),                      -- Quality of fetched data
    parsing_errors INTEGER DEFAULT 0,                      -- Errors during parsing
    validation_errors INTEGER DEFAULT 0,                   -- Validation errors
    
    -- Performance Metrics
    fetch_duration_seconds DECIMAL(10,3),                  -- Time to fetch
    parse_duration_seconds DECIMAL(10,3),                  -- Time to parse
    load_duration_seconds DECIMAL(10,3),                   -- Time to load to database
    
    -- Network and API Metrics
    api_calls_made INTEGER DEFAULT 0,                      -- Number of API calls
    data_transferred_mb DECIMAL(10,3),                     -- Data transfer volume
    rate_limit_hits INTEGER DEFAULT 0,                     -- Rate limit encounters
    
    -- Error Handling
    error_message TEXT,
    error_details JSONB,
    retry_attempts INTEGER DEFAULT 0,
    
    -- Source Response Metadata
    source_response_metadata JSONB,                        -- Headers, status codes, etc.
    last_modified_header TIMESTAMP,                        -- From HTTP Last-Modified
    etag_value VARCHAR(100),                               -- HTTP ETag for caching
    
    -- Incremental Update Support
    incremental_marker VARCHAR(200),                       -- Bookmark for next incremental fetch
    incremental_timestamp TIMESTAMP,                       -- Timestamp for next incremental fetch
    full_sync_required BOOLEAN DEFAULT FALSE               -- Flag if full sync needed next time
);

-- =============================================================================
-- INDEXES FOR PERFORMANCE
-- =============================================================================

-- CVE table indexes
CREATE INDEX IF NOT EXISTS idx_cves_source_id ON cves(source_id);
CREATE INDEX IF NOT EXISTS idx_cves_published_date ON cves(published_date);
CREATE INDEX IF NOT EXISTS idx_cves_severity ON cves(severity);
CREATE INDEX IF NOT EXISTS idx_cves_cvss_v3_score ON cves(cvss_v3_score);
CREATE INDEX IF NOT EXISTS idx_cves_search_vector ON cves USING gin(search_vector);
CREATE INDEX IF NOT EXISTS idx_cves_business_criticality ON cves(business_criticality);

-- CPE table indexes
CREATE INDEX IF NOT EXISTS idx_cpes_cve_id ON cpes(cve_id);
CREATE INDEX IF NOT EXISTS idx_cpes_vendor_product ON cpes(vendor, product);
CREATE INDEX IF NOT EXISTS idx_cpes_source_id ON cpes(source_id);

-- Source tracking indexes
CREATE INDEX IF NOT EXISTS idx_sources_category ON vulnerability_sources(category);
CREATE INDEX IF NOT EXISTS idx_sources_status ON vulnerability_sources(status);
CREATE INDEX IF NOT EXISTS idx_sources_priority ON vulnerability_sources(priority);

-- Audit and monitoring indexes
CREATE INDEX IF NOT EXISTS idx_fetch_audit_source_id ON source_fetch_audit(source_id);
CREATE INDEX IF NOT EXISTS idx_fetch_audit_fetch_started ON source_fetch_audit(fetch_started);
CREATE INDEX IF NOT EXISTS idx_fetch_audit_status ON source_fetch_audit(status);

-- Pipeline execution indexes
CREATE INDEX IF NOT EXISTS idx_pipeline_executions_started_at ON pipeline_executions(started_at);
CREATE INDEX IF NOT EXISTS idx_pipeline_executions_status ON pipeline_executions(execution_status);

-- =============================================================================
-- TRIGGERS AND FUNCTIONS
-- =============================================================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update cves.updated_at timestamp
DROP TRIGGER IF EXISTS trigger_cves_updated_at ON cves;
CREATE TRIGGER trigger_cves_updated_at 
    BEFORE UPDATE ON cves 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Trigger to update vulnerability_sources.updated_at timestamp
DROP TRIGGER IF EXISTS trigger_sources_updated_at ON vulnerability_sources;
CREATE TRIGGER trigger_sources_updated_at 
    BEFORE UPDATE ON vulnerability_sources 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function to update search vector
CREATE OR REPLACE FUNCTION update_search_vector()
RETURNS TRIGGER AS $$
BEGIN
    NEW.search_vector = to_tsvector('english', 
        COALESCE(NEW.cve_id, '') || ' ' ||
        COALESCE(NEW.description, '') || ' ' ||
        COALESCE(array_to_string(NEW.cwe_ids, ' '), '')
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update search vector
DROP TRIGGER IF EXISTS trigger_update_search_vector ON cves;
CREATE TRIGGER trigger_update_search_vector
    BEFORE INSERT OR UPDATE ON cves
    FOR EACH ROW EXECUTE FUNCTION update_search_vector();

-- Function to update source last_fetch_at
CREATE OR REPLACE FUNCTION update_source_last_fetch()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE vulnerability_sources 
    SET 
        last_fetch_at = NEW.fetch_completed,
        last_fetch_status = NEW.status
    WHERE id = NEW.source_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update source last fetch info
DROP TRIGGER IF EXISTS trigger_update_source_last_fetch ON source_fetch_audit;
CREATE TRIGGER trigger_update_source_last_fetch
    AFTER INSERT OR UPDATE ON source_fetch_audit
    FOR EACH ROW
    EXECUTE FUNCTION update_source_last_fetch();

-- =============================================================================
-- VIEWS FOR COMMON QUERIES
-- =============================================================================

-- View: High-priority vulnerabilities with source information
CREATE OR REPLACE VIEW high_priority_vulnerabilities AS
SELECT 
    c.cve_id,
    c.description,
    c.severity,
    c.cvss_v3_score,
    c.published_date,
    c.business_criticality,
    vs.source_name,
    vs.display_name as source_display_name,
    vs.priority as source_priority,
    c.requires_immediate_attention
FROM cves c
JOIN vulnerability_sources vs ON c.source_id = vs.id
WHERE c.severity IN ('high', 'critical') 
   OR c.cvss_v3_score >= 7.0
   OR c.requires_immediate_attention = true
ORDER BY c.cvss_v3_score DESC NULLS LAST, c.published_date DESC;

-- View: Source statistics and health
CREATE OR REPLACE VIEW source_health_summary AS
SELECT 
    vs.source_name,
    vs.display_name,
    vs.status,
    vs.last_fetch_at,
    vs.last_fetch_status,
    COUNT(c.cve_id) as total_cves,
    COUNT(CASE WHEN c.created_at > NOW() - INTERVAL '30 days' THEN 1 END) as recent_cves,
    AVG(qm.completeness_score) as avg_completeness,
    AVG(qm.accuracy_score) as avg_accuracy
FROM vulnerability_sources vs
LEFT JOIN cves c ON vs.id = c.source_id
LEFT JOIN quality_metrics qm ON vs.id = qm.source_id
GROUP BY vs.id, vs.source_name, vs.display_name, vs.status, vs.last_fetch_at, vs.last_fetch_status
ORDER BY vs.priority DESC;

-- =============================================================================
-- COMMENTS AND DOCUMENTATION
-- =============================================================================

COMMENT ON TABLE vulnerability_sources IS 'Master registry of all vulnerability data sources with configuration and status tracking';
COMMENT ON TABLE cves IS 'Enhanced CVE data with multi-source tracking, quality metrics, and business context';
COMMENT ON TABLE pipeline_executions IS 'Execution tracking for vulnerability data pipeline runs';
COMMENT ON TABLE quality_metrics IS 'Data quality metrics per source and pipeline execution';
COMMENT ON TABLE source_fetch_audit IS 'Detailed audit log of all source fetch operations';

-- =============================================================================
-- SCHEMA VERSION
-- =============================================================================

-- Insert schema version information
INSERT INTO vulnerability_sources (
    source_name, category, display_name, url, status, priority,
    enhancement_needed, engine_type, vulnerability_engine_priority, notes
) VALUES (
    'schema_version',
    'system',
    'Database Schema Version',
    'internal://schema',
    'active',
    10,
    false,
    'existing',
    'high',
    'Schema version 2.0.0 - Multi-source with quality framework'
) ON CONFLICT (source_name) DO UPDATE SET
    notes = EXCLUDED.notes,
    updated_at = CURRENT_TIMESTAMP;